# Language specific regular expressions
#
# The class LanguageRules loads and compiles all regular expressions except ".replace"
#
# The properties ended with ".isCorrect" used in LanguageRules.is method.
#
positiveAnswer.isCorrect  = (y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?
negativeAnswer.isCorrect  = (n|no( way)?|nah|nope|negative|i don't think so|yeah no)[.!]?

# Properties used for method ask("animal")
#
# The first property used to test user input and the other properties
# are used for post processing the data. The method find the first
# pattern that matches the user input and return result of function
# userInput.replaceFirst("<pattern>", "<replace>").
#
# In case if no pattern match the user input returned unmodified.
#
# The number is rules (pattern & replace) is unlimited.
#
animal.isCorrect        = (?<!the )(an? )?..+
animal.1.pattern        = ^(an? .+)
animal.1.replace        = $1
animal.2.pattern        = the ([aeiou].+)
animal.2.replace        = an $1
animal.3.pattern        = the (.+)
animal.3.replace        = a $1
animal.4.pattern        = ^([aeiou].+)
animal.4.replace        = an $1
animal.5.pattern        = ^(.+)
animal.5.replace        = a $1


# This regular expressions used for method ask("statement")
#
# We allow to accept not only the statements but questions as well.
#
# The additional postprocessing expressions transform question into
# the regular statement and cut ending punctuation symbol.
#
statement.isCorrect             = (it (can|has|is)|(has|can|is) it|does it have) .+
statement.1.pattern             = (it (has|can|is) (.+?))\\.?$
statement.1.replace             = $1
statement.2.pattern             = (has|can|is) it (.+?)[.?]?$
statement.2.replace             = it $1 $2
statement.3.pattern             = does it have (.+?)[.?]?$
statement.3.replace             = it has $1

# ---

question.1.pattern              = it has (.+)
question.1.replace              = does it have $1?
question.2.pattern              = it (can|is) (.+)
question.2.replace              = $1 it $2?

definite.1.pattern              = (an?) (.*)
definite.1.replace              = the $2

negative.1.pattern              = it can (.+)
negative.1.replace              = the {0} can''t $1
negative.2.pattern              = it has (.+)
negative.2.replace              = the {0} doesn''t have $1
negative.3.pattern              = it is (.+)
negative.3.replace              = the {0} isn''t $1

negative.indefinite.1.pattern   = it can (.+)
negative.indefinite.1.replace   = it can't $1
negative.indefinite.2.pattern   = it has (.+)
negative.indefinite.2.replace   = it doesn't have $1
negative.indefinite.3.pattern   = it is (.+)
negative.indefinite.3.replace   = it isn't $1

positive.1.pattern              = it can (.+)
positive.1.replace              = the {0} can $1
positive.2.pattern              = it has (.+)
positive.2.replace              = the {0} has $1
positive.3.pattern              = it is (.+)
positive.3.replace              = the {0} is $1

animalFact.1.pattern            = it (.+)
animalFact.1.replace            = %s $1

guessAnimal.1.pattern           = (.+)
guessAnimal.1.replace           = is it $1?

animalName.1.pattern            = (an? )(.+)
animalName.1.replace            = $2

